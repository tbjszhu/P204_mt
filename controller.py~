#!/usr/bin/python

from mail import Mail
from kinect import Kinect
from NAO import NAO
from xaalproxy import xAALProxy
import netifaces as ni
import time
import rospy
from std_srvs.srv import Empty
from std_msgs.msg import String
from geometry_msgs.msg import Twist
from naoqi_bridge_msgs.msg import *
import actionlib
from naoqi import (ALBroker, ALProxy, ALModule)
import math

class Controller:
    
    def __init__(self):
        self.nao = NAO(self) #this cmd (rospy.init_node) makes ctrl+c invalide 
        self.kinect = Kinect()
        self.xaalproxy = xAALProxy()

    def run(self):
        print "Start->"
        while True:   
            msg = self.xaalproxy.recvmsg()
            if msg:
                if msg.is_notify and (msg.action == "alert" or msg.action == "attributesChange"):
                    body = str(msg.get_parameters())
                    #print body #body = "{u'falls': [{u'delay': 18, u'x': 4.7420089999999995, u'y': 1.958904, u'zone': u'0355'}]}"
                    if "'x'" in body and "'y'" in body:
                        split_res = body.split("'x': ")
                        x = float(split_res[1][0:4])
                        split_res = body.split("'y': ")
                        y = float(split_res[1][0:4])
                        print "x : %f, y : %f" % (x,y)  
                        
                        x_org = 3.5
                        y_org = 7
                        distance = math.sqrt((x_org - x) * (x_org - x) + (y_org -y) * (y_org -y))
                        if x != x_org:
                            direction =  math.atan((y_org - y)/(x_org - x))
                        else:
                            direction = math.pi/2
                            
                        if direction > 0:
                            direction = math.pi/2 - direction
                        else:
                            direction = (-1) * (math.pi/2 + direction)       
                        print "distance : %f, direction : %f, %f" % (distance, direction, direction * 180 / 3.1415926)                

    def waitPersonResponse(self, timeout):
        count = 0
        self.nao.resetVerifyState()
        while not self.nao.getVerifyState():
            time.sleep(3)
            count += 1
            if (timeout!=0) and (count > timeout) : 
                print "waitpersonresponse timeout!"
                return False
        print "getpersonresponse"
        return self.nao.getVerifyState()%2
    
    def sendMail(self):
        link = self.webRTCaddress()
        topic = "nao_robot/camera/top/camera/image_raw"
        text = "The assistance robot and smart house has detected a fall. To check, please see the video from this address " + link
        text = text + "/stream_viewer?topic=" + topic
        mail = Mail(text)
        mail.sendMail()

    def webRTCaddress(self):
        ni.ifaddresses('wlan0')
        ip = ni.ifaddresses('wlan0')[2][0]['addr'] + ":8080"
        print "HostIP : ", ip
        return ip

    def scenario(self):
        self.smartDeviceAction("shutterleft", "up")
        self.smartDeviceAction("shutterright", "up")
        self.smartDeviceAction("lamp1", "on")
        self.smartDeviceAction("lamp2", "on")
        self.smartDeviceAction("lamp3", "on")
        print "lampes allumeees"
        self.nao.say("I turn off the stove and open the window shades")
        self.smartDeviceAction("switch", "off")
        self.nao.say("I turn the lights on")
        print "porte ouverte"
        try:
            self.sendMail()
            self.nao.say("I sent an email to your contact list")
        except:
            print "mail send failed"
        self.smartDeviceAction("mobilephone","inform", "msg", "J'ai detecte un probleme. Votre ami a fait un malaise. Venez l'aider.")
        self.nao.say("I am sending a vocal message")
        

    def smartDeviceAction(self, device, action, key=None, value=None):
        self.xaalproxy.sendmsg(device, action, key, value)


    def testNao(self):
        # stif_enable = rospy.ServiceProxy('/body_stiffness/enable', Empty)
        #stif_enable() 
        #self.nao.moveToPerson() #ok
        self.nao.say("m")
        self.nao.say("Hello")
        print "Bonjour"
        self.nao.verifyPersonState(5)
        print self.nao.verifyState
if __name__== '__main__':
    c = Controller()
    #c.testNao()
   

    try:
        while True:
            print "test"
    except KeyboardInterrupt:
        print "Program Quit"
